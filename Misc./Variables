repeat wait() until game:IsLoaded()
getgenv().players = game:GetService"Players"
getgenv().client = game:GetService"Players".LocalPlayer
getgenv().DiscordInvite = "https://discord.gg/474DYGPua5"
getgenv().GetChar = function(Player)
	if not Player or type(Player) ~= "userdata" or Player.ClassName ~= "Player" then Player = game:GetService"Players".LocalPlayer end
	if Player.Character and Player.Character:FindFirstChildOfClass"Humanoid" and Player.Character:FindFirstChild"HumanoidRootPart" or Player.Character.PrimaryPart then
		return Player.Character, Player.Character:FindFirstChild"HumanoidRootPart" or Player.Character.PrimaryPart, Player.Character.Humanoid
	end
end
if getconnections then
	getgenv().buttonclick = function(button)
		local events = { "MouseButton1Click", "MouseButton1Down", "Activated" }
		for i, v in pairs(events) do
			pcall(function()
				for i, v in pairs(getconnections(button[v])) do pcall(function() v:Fire() end) end
			end)
		end
	end
end
if not fireproximityprompt then
	getgenv().fireproximityprompt = function(Obj, Amount)
		if Obj.ClassName == "ProximityPrompt" then
			local PromptTime = Obj.HoldDuration
			Obj.HoldDuration = 0
			Obj.Enabled, Obj.RequiresLineOfSight = true, false
			for i = 1, Amount or 1 do
				Obj:InputHoldBegin()
				Obj:InputHoldEnd()
			end
			Obj.HoldDuration = PromptTime
		else error"userdata<ProximityPrompt> expected" end
	end
end
coroutine.wrap(function()
	local Classes, SavedClasses = game:GetService"HttpService":JSONDecode(game:HttpGet("http://setup.roblox.com/" .. game:HttpGet"http://setup.roblox.com/versionQTStudio" .. "-API-Dump.json")).Classes, {}
	for i, Class in next, Classes do
		SavedClasses[Class.Name] = {}
		for i, v in next, Class.Members do table.insert(SavedClasses[Class.Name], v.Name) end
	end
	getgenv().GetClassProperties = function(Class)
		if type(Class) == "userdata" then Class = Class.ClassName end
		return SavedClasses[Class]
	end
end)()
getgenv().Obfuscate = function(String, Site)
	if Site then String = game:HttpGet(String) end
	local encode = String:gsub(".", function(bb) return "\\" .. bb:byte() end) or String
	setclipboard('loadstring("' .. encode .. '")()')
	warn"Obfuscated Using Trash Obfuscator!"
end
getgenv().MrJackTable = {
	UwULibrary = function()
		MrJackTable.UwULibraryLoaded = nil
		loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/UI-Libraries/main/UwuWare.lua")()
		return MrJackTable.UwULibraryLoaded
	end,
	VenyxLibrary = function()
		MrJackTable.VenyxLibraryLoaded = nil
		loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/hey/main/Ui%20Lbs/Venyx%20Ui")()
		return MrJackTable.VenyxLibraryLoaded
	end
}
getgenv().orderedpairs = function(t, reverse)
	local function cmp_multitype(op1, op2)
		local type1, type2 = type(op1), type(op2)
		if reverse then
			if type1 ~= type2 then return type1 > type2
			elseif type1 == "number" or type1 == "string" then return op1 > op2
			elseif type1 == "boolean" then return op1 == true
			else return tostring(op1) > tostring(op2) end
		else
			if type1 ~= type2 then return type1 < type2
			elseif type1 == "number" or type1 == "string" then return op1 < op2
			elseif type1 == "boolean" then return op1 == true
			else return tostring(op1) < tostring(op2) end
		end
	end

	local function __genOrderedIndex(t)
		local orderedIndex = {}
		for key in pairs(t) do table.insert(orderedIndex, key) end
		table.sort(orderedIndex, cmp_multitype)
		return orderedIndex
	end

	local function orderedNext(t, state)
		local key = nil
		if state == nil then
			t.__orderedIndex = __genOrderedIndex(t)
			key = t.__orderedIndex[1]
		else
			for i = 1, table.getn(t.__orderedIndex) do
				if t.__orderedIndex[i] == state then key = t.__orderedIndex[i + 1] end
			end
		end
		if key then return key, t[key] end
		t.__orderedIndex = nil
		return
	end

	return orderedNext, t, nil
end
getgenv().RandomName = function(Size)
	local String = ""
	local Alphabet = {
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9",
		"0",
		"a",
		"b",
		"c",
		"d",
		"e",
		"f",
		"g",
		"h",
		"i",
		"j",
		"k",
		"l",
		"m",
		"n",
		"o",
		"p",
		"q",
		"r",
		"s",
		"t",
		"u",
		"v",
		"w",
		"x",
		"y",
		"z",
		"A",
		"B",
		"C",
		"D",
		"E",
		"F",
		"G",
		"H",
		"I",
		"J",
		"K",
		"L",
		"M",
		"N",
		"O",
		"P",
		"Q",
		"R",
		"S",
		"T",
		"U",
		"V",
		"W",
		"X",
		"Y",
		"Z"
	}
	for i = 1, Size do String = String .. Alphabet[math.random(#Alphabet)] end
	return String
end
