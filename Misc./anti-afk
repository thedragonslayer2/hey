repeat wait() until game:IsLoaded()
local client = game:GetService"Players".LocalPlayer
-- anti afk
local vu = game:GetService"VirtualUser"
client.Idled:connect(function()
	vu:CaptureController()
	vu:ClickButton2(Vector2.new())
end)
client.Idled:connect(function()
	vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
	wait(1)
	vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)
client.Idled:connect(function() vu:ClickButton2(Vector2.new()) end)
-- anti discord
local synapse, shithttp = syn and syn.request, http and http.request
local request = http_request or request or HttpPost or synapse or shithttp
if request and hookfunction then
	anti_webhook = hookfunction(request, function(self)
		if self.Url and self.Method == "POST" and self.Url then
			if string.find(self.Url, "Bypass") then self.Url = string.gsub(self.Url, "Bypass", "")
			else
				local abcdef = { Url = self.Url, Method = "DELETE" }
				request(abcdef)
				self.Url = "SOMEONE TRYING TO LOG SOMETHING!"
			end
		end
		return anti_webhook(self)
	end)
end
coroutine.wrap(function()
	if hookmetamethod then
		pcall(function() setreadonly(getrawmetatable(game), false) end)
		--[[
			local OldIndex
			OldIndex = hookmetamethod(game, "__index", function(Self, Index) return OldIndex(Self, Index) end)
			local OldNewIndex
			OldNewIndex = hookmetamethod(game, "__newindex", function(Self, Index, Value) return OldNewIndex(Self, Index, Value) end)
			local OldNamecall
			OldNamecall = hookmetamethod(game, "__namecall", function(Self, ...) return OldNamecall(Self, ...) end)
		]]
		-- Anti Noclip Bypass
		local rnd, BypassNoclip = Random.new():NextInteger(150, 1e5)
		BypassNoclip = hookmetamethod(Enum.HumanoidStateType, "__index", function(Self, Index)
			if Index == "StrafingNoPhysics" and Self == Enum.HumanoidStateType then return rnd end
			return BypassNoclip(Self, Index)
		end)
		-- Spoof Account
		local acc_spoof
		acc_spoof = hookmetamethod(game, "__index", function(Self, Index)
			if Index == "AccountAge" and Self == client then return tonumber"99999"
			elseif Index == "MembershipType" and Self == client then return Enum.MembershipType.Premium end
			return acc_spoof(Self, Index)
		end)
		local BadgeService, GamePassService, MarketplaceService = game:GetService"BadgeService", game:GetService"GamePassService", game:GetService"MarketplaceService"
		-- things
		local OldNamecall
		OldNamecall = hookmetamethod(game, "__namecall", function(Self, ...)
			local method = getnamecallmethod()
			if method:lower() == "kick" and Self == client then
				local args = { ... }
				if args[1] and args[1] == "MrJack" then OldNamecall(Self, args[2]) end
				return wait(math.huge)
			elseif (method == "UserOwnsGamePassAsync" or method == "PlayerOwnsAsset") and Self == MarketplaceService then return true
			elseif (method == "UserHasBadgeAsync" or method == "UserHasBadge") and Self == BadgeService then return true
			elseif method == "PlayerHasPass" and Self == GamePassService then return true
			elseif method == "GetRankInGroup" and Self == client then return 255
			elseif method == "IsInGroup" and Self == client then return true end
			return OldNamecall(Self, ...)
		end)
		-- gamepass thing
		if hookfunction then
			hookfunction(MarketplaceService.UserOwnsGamePassAsync or MarketplaceService.PlayerOwnsAsset, function(...) return true end)
			hookfunction(BadgeService.UserHasBadgeAsync or BadgeService.UserHasBadge, function(...) return true end)
			hookfunction(GamePassService.PlayerHasPass, function(...) return true end)
		end
		pcall(function() setreadonly(getrawmetatable(game), true) end)
	end
end)()
client:GetPropertyChangedSignal"DevCameraOcclusionMode":Connect(function() client.DevCameraOcclusionMode = "Invisicam" end)
client:GetPropertyChangedSignal"CameraMaxZoomDistance":Connect(function() client.CameraMaxZoomDistance = 9e4 end)
client.DevCameraOcclusionMode, client.CameraMaxZoomDistance = "Invisicam", 9e4
return warn"ANTI AFK ACTIVATED!"
