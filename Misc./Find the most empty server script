if not IrisNotificationMrJack then
	loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/hey/main/Misc./iris%20notification%20function")()
elseif IrisNotificationUserMrJack then IrisNotificationUserMrJack.ClearAllNotifications() end
IrisNotificationMrJack(1, "Notification", "Checking Servers!", 9e9)
local maxplayers, gamelink, goodserver, data_table = math.huge, "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
if not _G.FailedServerID then _G.FailedServerID = {} end

local function serversearch()
	data_table = game:GetService"HttpService":JSONDecode(game:HttpGetAsync(gamelink))
	for _, v in pairs(data_table.data) do
		pcall(function()
			if type(v) == "table" and v.id and v.playing and tonumber(maxplayers) > tonumber(v.playing) and not table.find(_G.FailedServerID, v.id) then
				maxplayers = v.playing
				goodserver = v.id
			end
		end)
	end
end

function getservers()
	pcall(serversearch)
	for i, v in pairs(data_table) do
		if i == "nextPageCursor" then
			if gamelink:find"&cursor=" then
				local a = gamelink:find"&cursor="
				local b = gamelink:sub(a)
				gamelink = gamelink:gsub(b, "")
			end
			gamelink = gamelink .. "&cursor=" .. v
			pcall(getservers)
		end
	end
end

pcall(getservers)
wait(0.5)
IrisNotificationUserMrJack.ClearAllNotifications()
wait(0.5)
if goodserver == game.JobId or maxplayers == #game:GetService"Players":GetChildren() - 1 then
	warn("Your current server is the most empty server atm")
	return IrisNotificationMrJack(1, "Notification", "Your current server is the most empty server atm", 2)
end
IrisNotificationMrJack(1, "Notification", "Teleporting To Server\n" .. goodserver, 2)
table.insert(_G.FailedServerID, goodserver)
game:GetService"TeleportService":TeleportToPlaceInstance(game.PlaceId, goodserver)
return true
