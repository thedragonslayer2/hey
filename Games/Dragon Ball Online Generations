local gameNAME = "Dragon Ball Online Generations"
local library = loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/lib/main/UwU%20Ui")()
local players = game:GetService"Players"
local client = game:GetService"Players".LocalPlayer
if game.PlaceId == tonumber"4195834406" then return IrisNotificationMrJack(2, "", "Go to any World!", 5) end
local autofarm = library:CreateWindow"DBOG"
local clientdata = game:GetService"ReplicatedStorage".DataStorage[client.Name].Data
local selectedslot, worldName = clientdata["Slot" .. clientdata.SelectedSlot.Value]
pcall(function()
	worldName = game:GetService"ReplicatedStorage"["World Name"].Value
end)
if game.PlaceId == tonumber"5910108331" then
	autofarm:AddToggle{ text = "Auto HTC", flag = "htc" }
	local HTCList, damnlist = {
		["HealthEarn"] = "Health",
		["KiControlEarn"] = "Ki Control",
		["AgilityEarn"] = "Agility",
		["PhysicalDamageEarn"] = "Physical Damage",
		["KiDamageEarn"] = "Ki Damage"
	}, {
		["Health"] = "HealthEarn",
		["Ki Control"] = "KiControlEarn",
		["Agility"] = "AgilityEarn",
		["Physical Damage"] = "PhysicalDamageEarn",
		["Ki Damage"] = "KiDamageEarn"
	}
	autofarm:AddList{
		text = "Select Stat",
		flag = "choosenhtc",
		value = "Health",
		values = HTCList
	}
	spawn(function()
		while wait() do
			pcall(function()
				if library.flags.htc then
					for i, v in next, selectedslot.Stats:GetDescendants() do
						pcall(function()
							local yes, selected = HTCList[v.Parent.Name], damnlist[library.flags.choosenhtc]
							while library.flags.htc and yes and yes == library.flags.choosenhtc and selected == v.Parent.Name and v.Name == "Progress" and v.Value < v.MaxValue and wait() do
								game:GetService"ReplicatedStorage".TrainingEvent.InitiateTraining:InvokeServer"End"
								game:GetService"ReplicatedStorage".TrainingEvent.InitiateTraining:InvokeServer(yes)
								game.ReplicatedStorage:WaitForChild"TrainingEvent":InvokeServer(client, "Upgrade", game.ReplicatedStorage:WaitForChild"TrainingEvent":WaitForChild"TrainingEvent":InvokeServer(client, "Senpai"))
							end
						end)
						if string.find(tostring(i), "0$") or string.find(tostring(i), "5$") then wait() end
					end
				end
			end)
		end
	end)
else
	pcall(function()
		local AutoStat_Win, toshit = library:CreateWindow"Auto Stats", {}
		for i, v in next, client.PlayerGui.Main.Menu.Stats.Frame["Stat Types"]:GetChildren() do
			AutoStat_Win:AddToggle{
				text = v.Name,
				callback = function(tog)
					if not tog and table.find(toshit, v.Name) then table.remove(toshit, table.find(toshit, v.Name))
					elseif tog and not table.find(toshit, v.Name) then table.insert(toshit, v.Name) end
				end
			}
		end
		spawn(function()
			while wait() do
				for i, v in next, toshit do
					pcall(function()
						if selectedslot.Stats.SkillPoints.Value > 0 then
							buttonclick(client.PlayerGui.Main.Menu.Stats.Frame["Stat Types"][v].Increase)
						end
					end)
				end
			end
		end)
	end)
	local Misc_win = library:CreateWindow"Misc", {}
	local onceforquest, AutoRespawn
	Misc_win:AddToggle{ text = "Fast-Attack(may kick you)", flag = "AttackSpeed" }
	Misc_win:AddToggle{ text = "Use Ki Blast", state = true, flag = "kiblast" }
	autofarm:AddToggle{ text = "Attack Players", flag = "players" }
	autofarm:AddToggle{ text = "Attack Nearby NPCs", flag = "closest" }
	pcall(function()
		local Quest_Folder, QuestTypes = autofarm:AddFolder"Auto Quest", {}
		Quest_Folder:AddToggle{ text = "Enabled", flag = "quest", callback = function() onceforquest = false end }
		for i, v in next, game:GetService"ReplicatedStorage".Guis.Quest[worldName]:GetChildren() do
			pcall(function()
				if v.Name ~= "Test Your Might" and not table.find(QuestTypes, v.QuestType.Value) then table.insert(QuestTypes, v.QuestType.Value) end
			end)
		end
		local QuestType_Folder = Quest_Folder:AddFolder"Quest Types"
		for i, v in next, QuestTypes do
			QuestType_Folder:AddToggle{ text = v, state = true, flag = v }
		end
	end)
	local PowerUpdebounce
	-- auto power up
	Misc_win:AddToggle{
		text = "Auto Power-Up",
		callback = function(tog)
			PowerUpdebounce = tog
			while PowerUpdebounce and wait(0.1) do
				pcall(function()
					local ohString2 = selectedslot.Moveset["Power-Up"].Value
					game:GetService"Players".LocalPlayer.Backpack.Events.ReplicateFunction:InvokeServer("Moves", ohString2, "Power-Up", clientdata, "Client", "T")
				end)
			end
		end
	}
	-- auto respawn
	Misc_win:AddToggle{
		text = "Auto Respawn",
		state = true,
		callback = function(tog)
			AutoRespawn = tog
			while AutoRespawn and wait(0.5) do
				if client.Character and client.Character:FindFirstChild"Humanoid" and client.Character.Humanoid.Health <= 0 then
					client.Backpack.Events.Respawn:FireServer()
					wait(1)
				end
			end
		end
	}
	-- auto charge
	pcall(function()
		local AutoReCharge
		Misc_win:AddToggle{
			text = "Charge",
			callback = function(tog)
				AutoReCharge = tog
				while AutoReCharge and wait(0.5) do
					if client.Character and not client.Character:FindFirstChild"Charging" then
						game:GetService"Players".LocalPlayer.Backpack.Events.ReplicateFunction:InvokeServer("LimbConfig", "RecollectKi", clientdata)
					end
				end
				game:GetService"Players".LocalPlayer.Backpack.Events.ReplicateFunction:InvokeServer("LimbConfig", "EndChargeKi")
			end
		}
	end)
	-- auto transform
	pcall(function()
		local Transform_Folder = autofarm:AddFolder"Transformation"
		local tranformnumbers2, shit = {
			["1"] = "One",
			["2"] = "Two",
			["3"] = "Three",
			["4"] = "Four",
			["5"] = "Five",
			["6"] = "Five",
			["7"] = "Seven",
			["8"] = "Eight"
		}, {}
		for i = 1, 8 do table.insert(shit, "slot " .. i) end
		Transform_Folder:AddToggle{ text = "Auto Transform", flag = "tranform" }
		Transform_Folder:AddList{
			text = "Select Transformation Slot",
			flag = "choosentranform",
			value = "slot 1",
			values = shit
		}
		spawn(function()
			while wait() do
				pcall(function()
					local num = string.gsub(library.flags.choosentranform, "slot ", "")
					local gotnum = tranformnumbers2[num]
					if library.flags.tranform and gotnum and client.Character and client.Character:FindFirstChild"Humanoid" and client.Character.Humanoid.health > 0 and not client.Character:FindFirstChild"Transformation" and not client.Character:FindFirstChild"AuraType" and client.Character.PlayerStats.Transformation.Value == 100 and not client.Character.Occupied.Transforming.Value then
						local ohString2 = selectedslot.Moveset["Transformation" .. num].Value
						local ohString1 = selectedslot.MoveList[ohString2].Section.Value
						client.Backpack.Events.ReplicateFunction:InvokeServer(ohString1, ohString2, gotnum)
					end
				end)
			end
		end)
	end)
	-- dragon ball
	local gettingdp
	pcall(function()
		local DB_Folder = autofarm:AddFolder"Dragon Ball"
		DB_Folder:AddToggle{ text = "Auto Collect DB", flag = "AutoDB" }
		DB_Folder:AddToggle{ text = "Dragon Ball ESP", flag = "ball" }
		local getdragonballdelay
		DB_Folder:AddButton{
			text = "TP to Dragon Ball",
			callback = function()
				local dragon = workspace.Map:FindFirstChild("ClickDetector", true)
				if dragon then
					client.Character.HumanoidRootPart.CFrame = dragon.Parent.CFrame
				elseif not getdragonballdelay then
					getdragonballdelay = true
					IrisNotificationMrJack(1, "Notification", "Dragon Ball NOT Found", 1)
					wait(0.5)
					getdragonballdelay = false
				end
			end
		}
		spawn(function()
			local got = {}
			while wait() do
				pcall(function()
					local dragon = workspace.Map:FindFirstChild("ClickDetector", true)
					if dragon and dragon.Parent then
						local esp = dragon.Parent:FindFirstChild("Dragon Ball", true)
						if not esp then
							local bill = Instance.new("BillboardGui", dragon.Parent)
							bill.Size = UDim2.new(1, 200, 1, 30)
							bill.Adornee = dragon.Parent
							bill.AlwaysOnTop = true
							local name = Instance.new("TextLabel", bill)
							name.Name = "Dragon Ball"
							name.TextWrapped = false
							name.Text = ""
							name.Font = "ArialBold"
							name.Size = UDim2.new(1, 0, 1, 0)
							name.TextSize = 15
							name.TextTransparency = 0.2
							name.TextStrokeTransparency = 0.5
							name.TextYAlignment = "Top"
							name.TextColor3 = Color3.new(1, 0, 0)
							name.BackgroundTransparency = 1
							name.Visible = library.flags.ball
						else
							esp.Text = "Dragon Ball,  " .. math.ceil((client.Character.HumanoidRootPart.Position - esp.Parent.Adornee.Position).Magnitude) .. "m Away"
							esp.Visible = library.flags.ball
						end
						if library.flags.AutoDB and not table.find(got, tostring(dragon.Parent.CFrame)) and client.Character and client.Character:FindFirstChild"HumanoidRootPart" then
							got, gettingdp = {}, true
							table.insert(got, tostring(dragon.Parent.CFrame))
							local lastpos = client.Character.HumanoidRootPart.CFrame
							wait(0.3)
							client.Character.HumanoidRootPart.CFrame = dragon.Parent.CFrame + Vector3.new(0, 5, 0)
							wait(1)
							game:GetService"ReplicatedStorage".Events.Update:FireServer()
							wait(1)
							client.Character.HumanoidRootPart.CFrame, gettingdp = lastpos, false
						end
					end
				end)
			end
		end)
	end)
	if game:GetService"ReplicatedStorage":FindFirstChild"Spawns" and #game:GetService"ReplicatedStorage".Spawns:GetChildren() ~= 0 then
		local Teleport_win, Tp_list = library:CreateWindow"Character Teleport", {}
		for i, part in next, game:GetService"ReplicatedStorage".Spawns:GetChildren() do table.insert(Tp_list, part.Name) end
		Teleport_win:AddList{
			text = "Select Area",
			value = Tp_list[1],
			values = Tp_list,
			callback = function(v)
				pcall(function()
					client.Character.HumanoidRootPart.CFrame = game:GetService"ReplicatedStorage".Spawns[v].CFrame
				end)
			end
		}
	end
	local tptargetfast
	game:GetService"RunService".Stepped:Connect(function()
		pcall(function()
			if not gettingdp then
				client.Character.HumanoidRootPart.CFrame = tptargetfast.HumanoidRootPart.CFrame * CFrame.new(0, 0, 10)
			end
		end)
	end)
	local oh9, alive, puncheddsa = game:GetService"ReplicatedStorage".Security.FCode
	spawn(function()
		while wait() do
			local shit, bruh, Lmfo, shush, shitd
			pcall(function()
				if client.Character and client.Character:FindFirstChild"Humanoid" and client.Character:FindFirstChild"Done" and client.Character.Humanoid.Health > 0 then shit = true
				else shit = false end
				if client.Character and client.Character:FindFirstChild"Blocking" and client.Character.Blocking:FindFirstChild"Knocked" and client.Character.Blocking:FindFirstChild"Stunned" and client.Character.Blocking.Knocked.Value == false and client.Character.Blocking.Stunned.Value == false then bruh = true
				else bruh = false end
				if client.Character and client.Character:FindFirstChild"Occupied" and client.Character.Occupied:FindFirstChild"Transforming" and client.Character.Occupied.Transforming.Value == false then Lmfo = true
				else Lmfo = false end
				if client.PlayerGui:FindFirstChild"Main" and client.PlayerGui.Main:FindFirstChild"String" and client.PlayerGui.Main.String.Text ~= "" then shush = true
				else shush = false end
				if tptargetfast and tptargetfast:FindFirstChild"Blocking" and tptargetfast.Blocking:FindFirstChild"Knocked" and tptargetfast.Blocking.Knocked.Value == false then shitd = true
				else shitd = false end
			end)
			alive = shit and bruh and Lmfo and shush and shitd
		end
	end)
	spawn(function()
		while wait() do
			if tptargetfast and tptargetfast:FindFirstChild"HumanoidRootPart" then
				local oh2 = tptargetfast.HumanoidRootPart
				while wait() and tptargetfast and tptargetfast:FindFirstChild"HumanoidRootPart" do
					pcall(function()
						if not client.Character:FindFirstChild"Charging" then
							game:GetService"Players".LocalPlayer.Backpack.Events.ReplicateFunction:InvokeServer("LimbConfig", "RecollectKi", clientdata)
						elseif library.flags.kiblast and alive then
							game:GetService"ReplicatedStorage".Events.Create:InvokeServer(clientdata, oh2.Position + Vector3.new(0, 1, 0), oh2.Position, 5)
						end
					end)
				end
				game:GetService"Players".LocalPlayer.Backpack.Events.ReplicateFunction:InvokeServer("LimbConfig", "EndChargeKi")
			end
		end
	end)
	spawn(function()
		while true do
			pcall(function()
				local oh2 = tptargetfast.HumanoidRootPart
				local oh3 = client.Character
				pcall(function()
					client.Backpack.Events.Bridge:Invoke("Physical", "Combat", client, oh3, clientdata, "e", "Client")
				end)
				client.Backpack.Events.Bridge:Invoke("Physical", "Combat", client, oh3, clientdata, "q", "Client")
				puncheddsa = true
			end)
			if not tptargetfast or not tptargetfast:FindFirstChild"HumanoidRootPart" then puncheddsa = false end
			wait()
		end
	end)
	spawn(function()
		while wait() do
			pcall(function()
				local oh3 = client.PlayerGui.Main["Chase/Evasive"]
				if oh3.Visible then
					game:service"VirtualInputManager":SendKeyEvent(true, "X", false, game)
					wait(0.3)
				end
			end)
		end
	end)
	spawn(function()
		while true do
			pcall(function()
				local oh2 = tptargetfast.HumanoidRootPart
				local oh3 = client.Character
				if alive and puncheddsa and not gettingdp then
					client.Backpack.Events.Damage:FireServer("CombatDamage", oh2, oh3, "ShockwavePunchEffect", "Stamina Break", true, false, "Client", "Foward", "eData", clientdata, false, nil, oh9)
				end
			end)
			if library.flags.AttackSpeed then wait(0.05)
			else wait(0.1) end
		end
	end)

	local function getnpc(name)
		local maxdis, mob = math.huge
		for i, v in next, workspace.NPC:GetChildren() do
			pcall(function()
				local mobdis = (v.HumanoidRootPart.Position - client.Character.PrimaryPart.Position).magnitude
				if (not name or v.Name == name) and maxdis > mobdis and v:FindFirstChild"Humanoid" and v.Humanoid.health > 0 then
					maxdis = mobdis
					mob = v
				end
			end)
			wait()
		end
		return mob
	end

	local function quest_attack(req, questmerker)
		if not gettingdp then
			client.Character.HumanoidRootPart.CFrame = questmerker.CFrame
			local mob = getnpc(req.Name)
			if not mob then wait(3) end
			pcall(function()
				while library.flags.quest and getnpc(req.Name) and req.Value ~= req.MaxValue and wait() do
					mob = getnpc(req.Name)
					pcall(function()
						while library.flags.quest and req.Value ~= req.MaxValue and mob and mob:IsDescendantOf(workspace) and mob:FindFirstChild"HumanoidRootPart" and mob:FindFirstChild"Humanoid" and mob.Humanoid.health > 0 and client:FindFirstChild"Quest" and wait() do tptargetfast = mob end
					end)
					tptargetfast = nil
				end
			end)
		end
	end

	spawn(function()
		while wait() do
			local gotquest
			if library.flags.quest then
				if not client:FindFirstChild"Quest" or client.Quest:FindFirstChild"QuestType" and not library.flags[client.Quest.QuestType.Value] then
					pcall(function()
						for i, v in next, game:GetService"ReplicatedStorage".Guis.Quest[worldName]:GetChildren() do
							pcall(function()
								if library.flags[v.QuestType.Value] and v.Name ~= "Test Your Might" then
									game:GetService"ReplicatedStorage".Events.StartQuest:InvokeServer(worldName, v.Name)
								end
							end)
							if client:FindFirstChild"Quest" and client.Quest:FindFirstChild"QuestType" and library.flags[v.QuestType.Value] then break
							elseif string.find(tostring(i), "0$") then task.wait() end
						end
					end)
				end
				if client:FindFirstChild"Quest" and client.Quest:FindFirstChild"Requirements" then
					gotquest, onceforquest = true, false
					for i, req in next, client.Quest.Requirements:GetChildren() do
						pcall(function()
							if req:IsA"IntValue" then
								game:GetService"ReplicatedStorage".Events.StartQuest:InvokeServer(game:GetService"ReplicatedStorage"["World Name"].Value, "Requirement Given", req)
							elseif workspace:FindFirstChild"Marker Bin" and req:IsA"IntConstrainedValue" and req.Value < req.MaxValue then
								for i, questmerker in next, workspace["Marker Bin"]:GetChildren() do
									pcall(function()
										local marker
										pcall(function()
											marker = client.Quest.Requirements:FindFirstChild(questmerker.Name)
										end)
										if library.flags.quest and req.Value < req.MaxValue and (not marker or not marker:IsA"IntValue") then quest_attack(req, questmerker) end
									end)
								end
							end
						end)
					end
				end
			end
			if library.flags.quest and not onceforquest and not gotquest then
				IrisNotificationMrJack(1, "Notification", "All Quest have been Completed!", 10)
				onceforquest = true
			end
			if library.flags.players and not gotquest then
				pcall(function()
					for i, v in next, players:GetChildren() do
						if library.flags.players and v ~= client and v.Character and not v.Character:FindFirstChildWhichIsA("ForceField", true) and v.Character:FindFirstChild"HumanoidRootPart" and v.Character:FindFirstChild"Humanoid" and v.Character.Humanoid.health > 0 then
							local mob, stop, done = v.Character
							spawn(function()
								while wait() and not done do
									local checkhealth = mob.Humanoid.health
									wait(5)
									if checkhealth <= mob.Humanoid.health and not done then stop = true end
								end
							end)
							pcall(function()
								while library.flags.players and mob and not stop and mob:IsDescendantOf(workspace) and mob:FindFirstChild"HumanoidRootPart" and mob:FindFirstChild"Humanoid" and mob.Humanoid.health > 0 and wait() do tptargetfast = mob end
							end)
							done, tptargetfast = true, nil
						end
						wait()
					end
				end)
			end
			if library.flags.closest and not gotquest then
				local mob = getnpc()
				if mob then
					pcall(function()
						while library.flags.closest and mob and mob:IsDescendantOf(workspace) and mob:FindFirstChild"HumanoidRootPart" and mob:FindFirstChild"Humanoid" and mob.Humanoid.health > 0 and wait() do tptargetfast = mob end
					end)
					tptargetfast = nil
				end
			end
		end
	end)
end
autofarm:AddButton{
	text = "Copy Discord Invite",
	callback = function()
		setclipboard(DiscordInvite)
		IrisNotificationMrJack(1, "Notification", "Discord Link Copied!", 3)
	end
}
autofarm:AddBind{ text = "Toggle Gui", key = Enum.KeyCode.RightAlt, callback = function() library:Close() end }
local TeleportSer = library:CreateWindow"Place Teleport"
TeleportSer:AddButton{
	text = "Rejoin",
	callback = function(v)
		game:GetService"TeleportService":TeleportToPlaceInstance(game.PlaceId, game.JobId)
	end
}
TeleportSer:AddButton{
	text = "Switch Server",
	callback = function(v)
		loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/hey/main/Misc./ServerHop")()
	end
}
TeleportSer:AddButton{
	text = "Find Most Empty Server",
	callback = function()
		loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/hey/main/Misc./Find%20the%20most%20empty%20server%20script")()
	end
}
if not IrisNotificationMrJack then
	loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/hey/main/Misc./iris%20notification%20function")()
elseif IrisNotificationUserMrJack then IrisNotificationUserMrJack.ClearAllNotifications() end
library:Init()
