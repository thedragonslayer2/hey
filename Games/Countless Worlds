-- Countless Worlds
local library = loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/lib/main/UwU%20Ui")()
if game.PlaceId == tonumber"6900861054" then return IrisNotificationMrJack(2, "", "Play To Show GUI!", 5) end
local players, repStor, TpShit, tween = game:GetService"Players", game:GetService"ReplicatedStorage"
local StatDataMOD, ItemsMod = require(game:GetService"ReplicatedStorage".Modules.StatData), require(game:GetService"ReplicatedStorage".ItemsMod)
local autofarm = library:CreateWindow"Countless Worlds"
local Misc_window = library:CreateWindow"Misc"
pcall(function()
	local AutoStat_window = Misc_window:AddFolder"Auto Stats"
	for i, v in next, StatDataMOD.StatVals do AutoStat_window:AddToggle{ text = i, flag = i } end
	coroutine.wrap(function()
		while wait() do
			pcall(function()
				for i, v in next, StatDataMOD.StatVals do
					if library.flags[i] then
						game:GetService"ReplicatedStorage".Networking.RemoteEvents.StatsChange:FireServer(i)
						wait(0.1)
					end
				end
			end)
		end
	end)()
end)
game:GetService"RunService".Stepped:connect(function()
	if TpShit then game.Players.LocalPlayer.Character.Humanoid:ChangeState(11) end
end)

local function unsit()
	pcall(function()
		if client.Character.Humanoid.Sit then
			client.Character.Humanoid.Sit = false
			wait(0.5)
		end
	end)
end

local autofarmtog
if hookfunction and getnamecallmethod then
	autofarm:AddToggle{
		text = "Auto Farm",
		flag = "AutoFarm",
		callback = function(v)
			autofarmtog = v
			while wait() and autofarmtog do
				pcall(function()
					for i, v in next, workspace.MobSpawns:GetChildren() do
						pcall(function()
							local Name = v["Mob_Data"].MobName.Value
							if Name == library.flags.Target and autofarmtog and not v["Mob_Data"].InCombat.Value then
								unsit()
								client.Character.HumanoidRootPart.CFrame = v.CFrame
								wait(2)
								repeat wait() until not v:FindFirstChild"EnemyAssets"
							end
						end)
					end
				end)
			end
		end
	}
	local sd, ArrangedNames, MobMod = {}, {}, require(game:GetService"ReplicatedStorage".MobMod)
	for i, v in next, workspace.MobSpawns:GetChildren() do
		pcall(function()
			local Name = v["Mob_Data"].MobName.Value
			if not table.find(sd, MobMod.Mobs[Name].Level .. "--" .. Name) then table.insert(sd, MobMod.Mobs[Name].Level .. "--" .. Name) end
		end)
	end
	table.sort(sd, function(a, b)
		return tonumber(string.match(a, "%d+")) < tonumber(string.match(b, "%d+"))
	end)
	for i, v in next, sd do table.insert(ArrangedNames, v:split"--"[2]) end
	autofarm:AddList{
		text = "Select Target",
		flag = "Target",
		value = ArrangedNames[1],
		values = ArrangedNames
	}
end
autofarm:AddToggle{ text = "Auto Bounce", flag = "Bounce" }
local autodrop
autofarm:AddToggle{
	text = "Collect Drops",
	callback = function(v)
		autodrop = v
		while autodrop and wait() do
			pcall(function()
				for i, Folder in next, { workspace.Dropped, workspace.Globes } do
					for i, v in next, Folder:GetChildren() do
						if v:FindFirstChild"Grab" then
							v.Grab:FireServer()
							wait(0.1)
						end
					end
				end
			end)
		end
	end
}
-- auto collect and auto harvest
pcall(function()
	local Harvest_Folder = autofarm:AddFolder"Auto Harvest"
	autofarm:AddToggle{ text = "Auto Chest", flag = "chest" }
	Harvest_Folder:AddToggle{ text = "Enable", flag = "Harvest" }
	local HarvestKind_Folder, TypesHArvest = Harvest_Folder:AddFolder"Types", {}
	for i, v in next, workspace.MaterialGivers:GetChildren() do
		table.find(TypesHArvest, v)
		HarvestKind_Folder:AddToggle{
			text = ItemsMod.Items[v.Name].Name,
			state = true,
			callback = function(sta)
				if sta and not table.find(TypesHArvest, v) then table.insert(TypesHArvest, v)
				elseif not sta and table.find(TypesHArvest, v) then table.remove(TypesHArvest, table.find(TypesHArvest, v)) end
			end
		}
	end
	for i, v in next, workspace.OreSpawns:GetChildren() do
		table.find(TypesHArvest, v)
		HarvestKind_Folder:AddToggle{
			text = ItemsMod.Items[v.Name].Name,
			state = true,
			callback = function(sta)
				if sta and not table.find(TypesHArvest, v) then table.insert(TypesHArvest, v)
				elseif not sta and table.find(TypesHArvest, v) then table.remove(TypesHArvest, table.find(TypesHArvest, v)) end
			end
		}
	end
	pcall(function()
		local Chests = {}
		coroutine.wrap(function()
			local function chestcehck(v)
				local shit = v:FindFirstChildWhichIsA("ProximityPrompt", true)
				if v:IsA"Model" and shit and shit.Parent.Parent.Parent == workspace then
					shit.HoldDuration = 0
					table.insert(Chests, shit)
				end
			end

			workspace.ChildAdded:Connect(function(v)
				repeat wait(0.2) until not v:IsA"Model" or not v:IsDescendantOf(workspace) or v:FindFirstChildWhichIsA("ProximityPrompt", true)
				chestcehck(v)
			end)
			for i, v in next, workspace:GetChildren() do chestcehck(v) end
		end)()

		local function Starttween(position, TweenSpeed)
			pcall(function()
				unsit()
				TpShit, tween = true, game:GetService"TweenService":Create(client.Character.HumanoidRootPart, TweenInfo.new((client.Character.HumanoidRootPart.Position - position).Magnitude / TweenSpeed, Enum.EasingStyle.Linear), { CFrame = CFrame.new(position) })
				tween:Play()
			end)
		end

		coroutine.wrap(function()
			while wait() do
				if library.flags.Bounce or library.flags.AutoFarm then
					pcall(function()
						for i, v in next, workspace.OrbFolder:GetChildren() do
							pcall(function()
								local shit = v:FindFirstChildWhichIsA("TouchTransmitter", true)
								while (library.flags.Bounce or library.flags.AutoFarm) and shit and wait() do
									coroutine.wrap(function()
										local speed = 100
										if (shit.Parent.Position - client.Character.HumanoidRootPart.Position).magnitude > 200 then speed = 5e3 end
										Starttween(shit.Parent.Position, speed)
									end)()
								end
							end)
							pcall(function()
								TpShit = false
								tween:Cancel()
							end)
						end
					end)
				end
				if library.flags.chest then
					pcall(function()
						for i, v in next, Chests do
							pcall(function()
								if not v:IsDescendantOf(workspace) then table.remove(Chests, i)
								elseif library.flags.chest then
									TpShit = true
									client.Character.HumanoidRootPart.CFrame = v.Parent.CFrame
									wait(0.2)
									if fireproximityprompt then fireproximityprompt(v)
									else
										wait(0.7)
										game:service"VirtualInputManager":SendKeyEvent(true, "E", false, game)
										wait(2)
									end
								end
							end)
						end
						TpShit = false
					end)
				end
				if library.flags.Harvest then
					pcall(function()
						for i, Type in next, TypesHArvest do
							for i, v in next, Type:GetChildren() do
								local shit = v:FindFirstChildWhichIsA("ProximityPrompt", true)
								if library.flags.Harvest and table.find(TypesHArvest, Type) and shit then
									TpShit = true
									client.Character.HumanoidRootPart.CFrame = shit.Parent.CFrame
									wait(0.2)
									if fireproximityprompt then fireproximityprompt(shit)
									else
										wait(0.7)
										game:service"VirtualInputManager":SendKeyEvent(true, "E", false, game)
										wait(2)
									end
								end
							end
						end
					end)
					TpShit = false
				end
			end
		end)()
	end)
end)
-- godmode
if hookfunction and getnamecallmethod then
	local OldNameCall = nil
	OldNameCall = hookmetamethod(game, "__namecall", function(Self, ...)
		if not checkcaller() and getnamecallmethod() == "FireServer" and Self.Name == "HitDetection" and (library.flags.GODMODE or library.flags.AutoFarm) then return end
		return OldNameCall(Self, ...)
	end)
	local autoHornetGrab
	Misc_window:AddToggle{
		text = "Auto Grap Hornet Quest",
		callback = function(v)
			autoHornetGrab = v
			while autoHornetGrab and wait() do
				pcall(function()
					if client.PlayerGui.TrackQuest.TrackFrame.QuestName.Text ~= "Hornet Eradication" then
						game:GetService"ReplicatedStorage".Networking.RemoteFunctions.CancelQuest:InvokeServer()
						game:GetService"ReplicatedStorage".Networking.RemoteEvents.AcceptQuest:FireServer"Hornet Eradication"
						wait(0.5)
					end
				end)
			end
		end
	}
	Misc_window:AddToggle{ text = "God Mode", flag = "GODMODE" }
	pcall(function()
		Misc_window:AddSlider{
			text = "Walk Speed",
			min = 28,
			max = 1e3,
			flag = "WalkSpeed",
			callback = function(v) client.Character.Humanoid.WalkSpeed = v end
		}
		Misc_window:AddSlider{
			text = "Jump Power",
			min = 50,
			max = 1e3,
			flag = "JumpPower",
			callback = function(v) client.Character.Humanoid.JumpPower = v end
		}
		local OldIndex
		OldIndex = hookmetamethod(game, "__index", function(Self, Index)
			if (Index == "JumpPower" or Index == "WalkSpeed") and Self.Name == "Humanoid" then return library.flags[Index] end
			return OldIndex(Self, Index)
		end)
	end)
end
autofarm:AddButton{
	text = "Copy Discord Invite",
	callback = function()
		setclipboard(DiscordInvite)
		IrisNotificationMrJack(1, "Notification", "Discord Link Copied!", 3)
	end
}
autofarm:AddBind{ text = "Toggle Gui", key = Enum.KeyCode.RightAlt, callback = function() library:Close() end }
local Teleport_win, Tp_list = library:CreateWindow"Character Teleport", {}
for i, part in next, workspace.SpawnFires:GetChildren() do table.insert(Tp_list, part.Name) end
Teleport_win:AddList{
	text = "Select Area",
	value = Tp_list[1],
	values = Tp_list,
	callback = function(v)
		pcall(function()
			unsit()
			client.Character.HumanoidRootPart.CFrame = workspace.SpawnFires[v]:FindFirstChildWhichIsA("Part", true).CFrame * CFrame.new(0, 5, 0)
		end)
	end
}
local TeleportSer = library:CreateWindow"Place Teleport"
TeleportSer:AddButton{
	text = "Rejoin",
	callback = function(v)
		game:GetService"TeleportService":TeleportToPlaceInstance(game.PlaceId, game.JobId)
	end
}
TeleportSer:AddButton{
	text = "Switch Server",
	callback = function(v)
		loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/hey/main/Misc./ServerHop")()
	end
}
TeleportSer:AddButton{
	text = "Find Most Empty Server",
	callback = function()
		loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/hey/main/Misc./Find%20the%20most%20empty%20server%20script")()
	end
}
if not IrisNotificationMrJack then
	loadstring(game:HttpGet"https://raw.githubusercontent.com/thedragonslayer2/hey/main/Misc./iris%20notification%20function")()
elseif IrisNotificationUserMrJack then IrisNotificationUserMrJack.ClearAllNotifications() end
library:Init()
if not hookfunction or not getnamecallmethod then
	return IrisNotificationMrJack(2, "Notification", "some features will not show because your executor is not supported,\n\nPlease download a Better one!", 7)
end
return true
